<?php
/**
 * Created by PhpStorm.
 * User: Double-Ming
 * Date: 2019/08/02
 * Email: 1023125136@qq.com
 */

namespace App\HttpController;

use App\Model\UserMoneyModel;
use EasySwoole\Validate\Validate;
use App\Utility\Pool\MysqlPool;
use App\Utility\Pool\RedisPool;
use EasySwoole\Http\Message\Status;
use App\Model\UsdtUserModel;
use App\Model\MoneyChangeModel;
use App\Model\UsdtOrderModel;

/**
 * Class Index
 * @package App\HttpController
 */
class User extends Base
{
    public $user = [];//用户信息

    /**
     * OverWrite
     * <onRequest> 此方法可用于请求过滤
     * @param string|null $action
     * @return bool|null
     */
    protected function onRequest(?string $action): ?bool
    {
        $onlyPost = ['editPass', 'editPayPass', 'setAddress', 'setUsdtInto', 'setUsdtOut', 'setDmrOut'];//需要POST添加到此处
        if (in_array($this->getActionName(), $onlyPost)) {
            if ($this->request()->getMethod() == 'POST') {
                if ($this->checkToken() == false) {
                    $this->writeJson(Status::CODE_BAD_REQUEST, 'token验证失败,请登录!');
                    return false;
                }
                $this->user = $this->checkToken();
                return true;
            } else {
                $this->writeJson(Status::CODE_BAD_REQUEST, '请使用POST请求');
                return false;
            }
        } else {//GET
            if ($this->checkToken() == false) {
                $this->writeJson(Status::CODE_BAD_REQUEST, 'token验证失败,请登录!');
                return false;
            }
            $this->user = $this->checkToken();
            return true;
        }
    }

    /**
     * PRIVATE
     * <checkToken> 检验token
     */
    private function checkToken()
    {
        $token = $this->request()->getRequestParam('token');
        $RedisPool = RedisPool::defer();
        $user = $RedisPool->get('User_token_' . $token);
        if (!$user) {
            return false;
        }
        $user = json_decode($user, true);
        return $user;
    }

    /**
     * <method> POST
     * <forgetPass> 修改密码知道原密码
     * @params password=>原密码 refpassword=>新密码
     * @return bool
     * @throws \Exception
     */
    public function editPass()
    {
        $validate = new Validate();
        $validate->addColumn('password')->required('原密码必填');
        $validate->addColumn('refpassword')->required('新密码必填');
        if ($this->validate($validate)) {
            $params = $this->request()->getRequestParam();
            $UserModel = new UsdtUserModel();
            $user = $UserModel->getUserByUsername($this->user['username']);
            if (!$user) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '用户不存在');
            }
            if (!password_verify($params['password'], $user['password'])) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '原密码输入不正确!');
            };
            $save = [
                'password' => password_hash($params['refpassword'], PASSWORD_DEFAULT),//新密码
            ];
            $res = $UserModel->saveData($save, $this->user['username']);
            if ($res == false) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '密码修改失败!');
            }
            return $this->writeJson(Status::CODE_OK, '密码修改成功');
        } else {
            return $this->writeJson(Status::CODE_BAD_REQUEST, $validate->getError()->__toString(), 'fail');
        }
    }


    /**
     * <method> POST
     * <editPayPass> 修改支付密码
     * @params pay_pass=>原支付密码 ref_pay_pass=>新支付密码
     * @return bool
     * @throws \Exception
     */
    public function editPayPass()
    {
        $validate = new Validate();
        $validate->addColumn('pay_pass')->required('原支付密码必填');
        $validate->addColumn('ref_pay_pass')->required('新支付密码必填');
        if ($this->validate($validate)) {
            $params = $this->request()->getRequestParam();
            $UserModel = new UsdtUserModel();
            $user = $UserModel->getUserByUsername($this->user['username']);
            if (!$user) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '用户不存在');
            }
            if (!password_verify($params['pay_pass'], $user['pay_pass'])) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '原支付密码输入不正确!');
            };
            $save = [
                'pay_pass' => password_hash($params['ref_pay_pass'], PASSWORD_DEFAULT),//新支付密码
            ];
            $res = $UserModel->saveData($save, $this->user['username']);
            if ($res == false) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '支付密码修改失败!');
            }
            return $this->writeJson(Status::CODE_OK, '支付密码修改成功');
        } else {
            return $this->writeJson(Status::CODE_BAD_REQUEST, $validate->getError()->__toString(), 'fail');
        }
    }


    /**
     * <method> GET
     * <getUserInfo> 获取用户信息
     * @return bool
     * @throws \Exception
     */
    public function getUserInfo()
    {
        $UserModel = new UsdtUserModel();
        $user = $UserModel->getUserByUsername($this->user['username']);
        if (!$user) {
            return $this->writeJson(Status::CODE_BAD_REQUEST, '用户不存在');
        }
        return $this->writeJson(Status::CODE_OK, 'SUCCESS', $user);
    }

    /**
     * <method> POST
     * <setAddress> 设置USDT地址
     * @params ad_usdt=>地址
     * @return bool
     * @throws \Exception
     */
    public function setAddress()
    {
        $address = $this->request()->getRequestParam('ad_usdt');
        if (empty($address)) {
            return $this->writeJson(Status::CODE_BAD_REQUEST, 'USDT地址必填');
        }
        $UserModel = new UsdtUserModel();
        $user = $UserModel->getUserByUsername($this->user['username']);
        if (!$user) {
            return $this->writeJson(Status::CODE_BAD_REQUEST, '用户不存在');
        }
        $save = [
            'ad_usdt' => $address, //usdt地址
        ];

        $res = $UserModel->saveData($save, $this->user['username']);
        if ($res == false) {
            return $this->writeJson(Status::CODE_BAD_REQUEST, 'USDT地址设置失败 !');
        }
        return $this->writeJson(Status::CODE_OK, 'USDT地址设置成功 !', $save);
    }

    /**
     * <method> GET
     * <getDmrWall> 获取钱包Dmr
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function getDmrWall()
    {
        $db = MysqlPool::defer();
        $data = [];
        $wall = $db->where('uid', $this->user['id'])->get('user_money', null, 'dmr,d_frozen');

        $list = $db->where('uid', $this->user['id'])->where('type', 2)
            ->orderBy('datetime', 'DESC')->get('money_change', [0, 5], 'datetime,money,lx');
        if (!empty($list)) {
            foreach ($list as $k => &$v) {
                $v['datetime'] = date('m-d i:s', strtotime($v['datetime']));
                if ($v['lx'] == 1) {
                    $v['money'] = '+' . $v['money'];
                    $v['der'] = 'DMR转入';
                } else {
                    $v['money'] = '-' . $v['money'];
                    $v['der'] = 'DMR转出';
                }
            }
        }
        $data = [
            'money' => empty($wall) ? [] : $wall[0],
            'list' => empty($list) ? [] : $list,
        ];
        return $this->writeJson(Status::CODE_OK, 'SUCCESS', $data);

    }

    /**
     * <method> GET
     * <getUsdtWall> 获取钱包Usdt
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function getUsdtWall()
    {
        $db = MysqlPool::defer();
        $data = [];
        $wall = $db->where('uid', $this->user['id'])->get('user_money', null, 'usdt,u_frozen');

        $list = $db->where('uid', $this->user['id'])->where('type', 1)
            ->orderBy('datetime', 'DESC')->get('money_change', [0, 5], 'datetime,money,lx');
        if (!empty($list)) {
            foreach ($list as $k => &$v) {
                $v['datetime'] = date('m-d i:s', strtotime($v['datetime']));
                if ($v['lx'] == 1) {
                    $v['money'] = '+' . $v['money'];
                    $v['der'] = 'USDT转入';
                } else {
                    $v['money'] = '-' . $v['money'];
                    $v['der'] = 'USDT转出';
                }
            }
        }
        $data = [
            'money' => empty($wall) ? [] : $wall[0],
            'list' => empty($list) ? [] : $list,
        ];
        return $this->writeJson(Status::CODE_OK, 'SUCCESS', $data);

    }

    /**
     * <method> GET
     * <getDmrLog> 获取dmr明细
     * @params lx=>不传查所有 lx=>1 转入 lx=>2 转出
     * @return bool
     * @throws \EasySwoole\Mysqli\Exceptions\ConnectFail
     * @throws \EasySwoole\Mysqli\Exceptions\OrderByFail
     * @throws \EasySwoole\Mysqli\Exceptions\PrepareQueryFail
     * @throws \Throwable
     */
    public function getDmrLog()
    {
        $lx = empty($this->request()->getRequestParam('lx')) ? null : $this->request()->getRequestParam('lx');
        $moneyChange = new MoneyChangeModel();

        $data = $moneyChange->getDmrLog($this->user['id'], $lx);

        return $this->writeJson(Status::CODE_OK, 'SUCCESS', $data);

    }

    /**
     * <method> GET
     * <getUsdtLog> 获取usdt明细
     * @params lx=>不传查所有 lx=>1 转入 lx=>2 转出
     * @return bool
     * @throws \EasySwoole\Mysqli\Exceptions\ConnectFail
     * @throws \EasySwoole\Mysqli\Exceptions\OrderByFail
     * @throws \EasySwoole\Mysqli\Exceptions\PrepareQueryFail
     * @throws \Throwable
     */
    public function getUsdtLog()
    {
        $lx = empty($this->request()->getRequestParam('lx')) ? null : $this->request()->getRequestParam('lx');
        $moneyChange = new MoneyChangeModel();

        $data = $moneyChange->getUsdtLog($this->user['id'], $lx);

        return $this->writeJson(Status::CODE_OK, 'SUCCESS', $data);
    }


    /**
     * <method> POST
     * <setUsdtInto> usdt转入申请
     * @params ad_usdt=>转入地址 number=>转入数量 path=>转入凭证
     * @return bool
     * @throws \Exception
     */
    public function setUsdtInto()
    {
        $validate = new Validate();
        $validate->addColumn('ad_usdt')->required('转入地址必填');
        $validate->addColumn('number')->required('转入数量必填');
        $validate->addColumn('path')->required('必须上传转入凭证');
        if ($this->validate($validate)) {
            $params = $this->request()->getRequestParam();
            $orderid = $this->createId($this->user['id'], $params['number']);//订单号
            $add = [
                'uid' => $this->user['id'],
                'ad_usdt' => $params['ad_usdt'],
                'usdt' => $params['number'],
                'path' => $params['path'],
                'datetime' => date('Y-m-d H:i:s'),
                'orderid' => $orderid,
                'lx' => 1,//转入
            ];
            $UsdtOrder = new UsdtOrderModel();
            $result = $UsdtOrder->insertUsdtOrder($add);
            if ($result == null) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '转入时出现错误,请重试!');
            }
            return $this->writeJson(Status::CODE_OK, 'SUCCESS', ['number' => $params['number'], 'order_id' => $orderid]);
        } else {
            return $this->writeJson(Status::CODE_BAD_REQUEST, $validate->getError()->__toString(), 'fail');
        }
    }

    /**
     * <method> POST
     * <setUsdtOut> usdt转出
     * @params ad_usdt=>转出地址 number=>转出数量
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function setUsdtOut()
    {
        $validate = new Validate();
        $validate->addColumn('ad_usdt')->required('转出地址必填');
        $validate->addColumn('number')->required('转出数量必填');
        if ($this->validate($validate)) {
            $params = $this->request()->getRequestParam();
            //检查用户转出金额
            $db = MysqlPool::defer();
            $money = $db->where('uid', $this->user['id'])->getOne('user_money', 'usdt,u_onway');

            if (empty($money)) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '系统发生错误,没有找到用户账户!');
            }
            if ($money['usdt'] < $params['number']) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, "您的USDT余额{$money['usdt']},可用不足!");
            }
            //开启事务
            $db->startTransaction();
            //减用户usdt,增加在途
            $up = [
                'usdt' => bcsub($money['usdt'], $params['number'], 4),
                'u_onway' => bcadd($money['u_onway'], $params['number'], 4),
            ];
            $res1 = $db->where('uid', $this->user['id'])->update('user_money', $up);
            //添加订单
            $orderid = $this->createId($this->user['id'], $params['number']);//订单号
            $add = [
                'uid' => $this->user['id'],
                'ad_usdt' => $params['ad_usdt'],
                'usdt' => $params['number'],
                'datetime' => date('Y-m-d H:i:s'),
                'orderid' => $orderid,
                'lx' => 2,//转出
            ];
            $res2 = $db->insert('usdt_order', $add);
            if ($res1 && $res2) {
                $db->commit();
                return $this->writeJson(Status::CODE_OK, 'SUCCESS', ['number' => $params['number'], 'orderid' => $orderid]);
            } else {
                $db->rollback();
                return $this->writeJson(Status::CODE_BAD_REQUEST, '转出操作失败,请重试!');
            }
        } else {
            return $this->writeJson(Status::CODE_BAD_REQUEST, $validate->getError()->__toString(), 'fail');
        }
    }

    /**
     *
     */
    public function setDmrOut()
    {
        $validate = new Validate();
        $validate->addColumn('ad_dmr')->required('转出地址必填');
        $validate->addColumn('number')->required('转出数量必填');
        if ($this->validate($validate)) {
            $params = $this->request()->getRequestParam();
            //检查用户转出金额
            $db = MysqlPool::defer();
            $money = $db->where('uid', $this->user['id'])->getOne('user_money', 'dmr,d_frozen');
            if (empty($money)) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, '系统发生错误,没有找到用户账户!');
            }
            if ($money['dmr'] < $params['number']) {
                return $this->writeJson(Status::CODE_BAD_REQUEST, "您的USDT余额{$money['usdt']},可用不足!");
            }

        } else {
            return $this->writeJson(Status::CODE_BAD_REQUEST, $validate->getError()->__toString(), 'fail');
        }
    }


    /**
     * <method> POST
     * <clearToken> 清除令牌
     * @params <String> token
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function clearToken()
    {
        $token = $this->request()->getRequestParam('token');
        $RedisPool = RedisPool::defer();
        $RedisPool->del('User_token_' . $token);

        return $this->writeJson(Status::CODE_OK, 'SUCCESS');
    }


    /**
     * @param $the_time
     * @return false|string
     */
    private function __time_tranx($the_time)
    {
        $now_time = time();
        $dur = $now_time - $the_time;
        if ($dur <= 0) {
            $mas = '刚刚';
        } else {
            if ($dur < 60) {
                $mas = $dur . '秒前';
            } else {
                if ($dur < 3600) {
                    $mas = floor($dur / 60) . '分钟前';
                } else {
                    if ($dur < 86400) {
                        $mas = floor($dur / 3600) . '小时前';
                    } else {
                        if ($dur < 259200) { //3天内
                            $mas = floor($dur / 86400) . '天前';
                        } else {
                            $mas = date("Y-m-d H:i:s", $the_time);
                        }
                    }
                }
            }
        }
        return $mas;
    }

}
