<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/8/13 0013
 * Time: 上午 9:25
 */

namespace App\HttpController\Manage;

use App\HttpController\Base;
use App\Utility\Pool\MysqlPool;
use App\Utility\Pool\RedisPool;
use EasySwoole\Http\Message\Status;


class Other extends Base
{
    public $user = [];

    protected function onRequest(?string $action): ?bool
    {
        $token = $this->request()->getRequestParam('token');
        $RedisPool = RedisPool::defer();
        $user = $RedisPool->get('Manage_token_' . $token);
        if (!$user) {
            $this->response()->redirect("/Manage/login");
            return false;
        }
        $this->user = json_decode($user, true);
        return true;
    }

    /**
     * <method> GET
     * <notic> 公告页面
     */
    public function notic()
    {
        return $this->render('Other/notic');
    }

    /**
     * <method> POST
     * <noticList> 公告列表
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function noticList()
    {
        $db = MysqlPool::defer();
        $list = $db->orderBy('datetime', 'DESC')->get('notic', null, 'id,admin_id,title,content,datetime,status,fixed');
        if (empty($list)) {
            return $this->writeJson(10004, '没有相关数据!');
        }
        $count = count($list);
        foreach ($list as $k => &$v) {
            if ($v['status'] == 1) {
                $v['status'] = '上线';
            } else {
                $v['status'] = '下线';
            }
            if ($v['fixed'] == 2) {
                $v['fixed'] = '<a style="color: #c12e2a">置顶</a>';
            } else {
                $v['fixed'] = '---';
            }
        }
        return $this->writeJson(0, 'SUCCESS', $list, $count);
    }

    /**
     * <method> GET
     * <addNotic> 添加公告页面
     */
    public function addNotic()
    {
        return $this->render('Other/addNotic');
    }

    /**
     * <method> POST
     * <saveNotic> 保存公告
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function saveNotic()
    {
        $params = $this->request()->getRequestParam();
        if (empty($params['title'])) {
            return $this->writeJson(10004, '标题不能为空');
        }
        if (empty($params['memo'])) {
            return $this->writeJson(10004, '内容不能为空');
        }
        $add = [
            'title' => $params['title'],
            'admin_id' => $this->user['id'],
            'content' => $params['memo'],
            'datetime' => date('Y-m-d H:i:s'),
        ];
        $db = MysqlPool::defer();
        $res = $db->insert('notic', $add);
        if ($res) {
            return $this->writeJson(Status::CODE_OK, 'SUCCESS');
        }
        return $this->writeJson(10004, '操作失败');

    }

    /**
     * <method> POST
     * <delNotic> 删除公告
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function delNotic()
    {
        $id = $this->request()->getRequestParam('id');
        if (empty($id)) {
            return $this->writeJson(10004, 'id不能为空');
        }
        $db = MysqlPool::defer();
        $res = $db->where('id', $id)->delete('notic');
        if ($res) {
            return $this->writeJson(Status::CODE_OK, 'SUCCESS');
        }
        return $this->writeJson(10004, '操作失败');
    }


    /**
     * <method> get
     * <admin> 管理员列表
     */
    public function admin()
    {
        return $this->render('Other/admin');
    }


    /**
     * <method> POST
     * <adminList> 管理员列表
     * @return bool
     * @throws \EasySwoole\Component\Pool\Exception\PoolEmpty
     * @throws \EasySwoole\Component\Pool\Exception\PoolException
     */
    public function adminList()
    {
        $db = MysqlPool::defer();
        $list = $db->where('status', 'online')->get('user', null, 'id,username,status');
        if (empty($list)) {
            return $this->writeJson(10004, '没有相关数据');
        }
        $count = count($list);
        foreach ($list as $k => &$v) {
            $v['status'] = '正常';
            $v['type'] = '超级管理员';
        }
        return $this->writeJson(0, 'SUCCESS', $list, $count);
    }

    /**
     * <method> GET
     * <money> 平台账户
     */
    public function money()
    {
        return $this->render('Other/money');
    }

    /**
     * OverWrite
     * @param int $statusCode
     * @param null $msg
     * @param null $result
     * @param int $count
     * @return bool
     */
    protected function writeJson($statusCode = 200, $msg = null, $result = null, $count = 0)
    {
        if (!$this->response()->isEndResponse()) {
            $data = [
                "code" => $statusCode,
                "data" => $result,
                "msg" => $msg,
                "count" => $count,
            ];
            $this->response()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
            $this->response()->withHeader('Content-type', 'application/json;charset=utf-8');
            $this->response()->withHeader('Access-Control-Allow-Origin', "*");
            $this->response()->withStatus(200);//http响应码
            return true;
        } else {
            return false;
        }
    }

}